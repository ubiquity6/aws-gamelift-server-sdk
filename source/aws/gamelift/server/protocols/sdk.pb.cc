// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk.proto

#include "sdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AttributeValue_SDMEntry_DoNotUse_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameProperty_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerSession_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Player_LatencyInMsEntry_DoNotUse_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AttributeValue_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameSession_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Player_PlayerAttributesEntry_DoNotUse_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Player_sdk_2eproto;
namespace com {
namespace amazon {
namespace whitewater {
namespace auxproxy {
namespace pbuffer {
class ProcessReadyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProcessReady> _instance;
} _ProcessReady_default_instance_;
class ProcessEndingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProcessEnding> _instance;
} _ProcessEnding_default_instance_;
class GameSessionActivateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameSessionActivate> _instance;
} _GameSessionActivate_default_instance_;
class GameSessionTerminateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameSessionTerminate> _instance;
} _GameSessionTerminate_default_instance_;
class UpdatePlayerSessionCreationPolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdatePlayerSessionCreationPolicy> _instance;
} _UpdatePlayerSessionCreationPolicy_default_instance_;
class AcceptPlayerSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcceptPlayerSession> _instance;
} _AcceptPlayerSession_default_instance_;
class RemovePlayerSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemovePlayerSession> _instance;
} _RemovePlayerSession_default_instance_;
class ReportHealthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportHealth> _instance;
} _ReportHealth_default_instance_;
class DescribePlayerSessionsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DescribePlayerSessionsRequest> _instance;
} _DescribePlayerSessionsRequest_default_instance_;
class BackfillMatchmakingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BackfillMatchmakingRequest> _instance;
} _BackfillMatchmakingRequest_default_instance_;
class StopMatchmakingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopMatchmakingRequest> _instance;
} _StopMatchmakingRequest_default_instance_;
class GetInstanceCertificateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetInstanceCertificate> _instance;
} _GetInstanceCertificate_default_instance_;
class ActivateGameSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActivateGameSession> _instance;
} _ActivateGameSession_default_instance_;
class TerminateProcessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TerminateProcess> _instance;
} _TerminateProcess_default_instance_;
class DescribePlayerSessionsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DescribePlayerSessionsResponse> _instance;
} _DescribePlayerSessionsResponse_default_instance_;
class UpdateGameSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateGameSession> _instance;
} _UpdateGameSession_default_instance_;
class GetInstanceCertificateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetInstanceCertificateResponse> _instance;
} _GetInstanceCertificateResponse_default_instance_;
class BackfillMatchmakingResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BackfillMatchmakingResponse> _instance;
} _BackfillMatchmakingResponse_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
class GameLiftResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameLiftResponse> _instance;
} _GameLiftResponse_default_instance_;
class GameSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameSession> _instance;
} _GameSession_default_instance_;
class GamePropertyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameProperty> _instance;
} _GameProperty_default_instance_;
class PlayerSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerSession> _instance;
} _PlayerSession_default_instance_;
class Player_PlayerAttributesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Player_PlayerAttributesEntry_DoNotUse> _instance;
} _Player_PlayerAttributesEntry_DoNotUse_default_instance_;
class Player_LatencyInMsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Player_LatencyInMsEntry_DoNotUse> _instance;
} _Player_LatencyInMsEntry_DoNotUse_default_instance_;
class PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Player> _instance;
} _Player_default_instance_;
class AttributeValue_SDMEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AttributeValue_SDMEntry_DoNotUse> _instance;
} _AttributeValue_SDMEntry_DoNotUse_default_instance_;
class AttributeValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AttributeValue> _instance;
} _AttributeValue_default_instance_;
}  // namespace pbuffer
}  // namespace auxproxy
}  // namespace whitewater
}  // namespace amazon
}  // namespace com
static void InitDefaultsProcessReady_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_ProcessReady_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProcessReady_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProcessReady_sdk_2eproto}, {}};

static void InitDefaultsProcessEnding_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_ProcessEnding_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::ProcessEnding();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::ProcessEnding::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProcessEnding_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProcessEnding_sdk_2eproto}, {}};

static void InitDefaultsGameSessionActivate_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_GameSessionActivate_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameSessionActivate_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameSessionActivate_sdk_2eproto}, {}};

static void InitDefaultsGameSessionTerminate_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_GameSessionTerminate_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameSessionTerminate_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameSessionTerminate_sdk_2eproto}, {}};

static void InitDefaultsUpdatePlayerSessionCreationPolicy_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_UpdatePlayerSessionCreationPolicy_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdatePlayerSessionCreationPolicy_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdatePlayerSessionCreationPolicy_sdk_2eproto}, {}};

static void InitDefaultsAcceptPlayerSession_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_AcceptPlayerSession_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AcceptPlayerSession_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAcceptPlayerSession_sdk_2eproto}, {}};

static void InitDefaultsRemovePlayerSession_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_RemovePlayerSession_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RemovePlayerSession_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRemovePlayerSession_sdk_2eproto}, {}};

static void InitDefaultsReportHealth_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_ReportHealth_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportHealth_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportHealth_sdk_2eproto}, {}};

static void InitDefaultsDescribePlayerSessionsRequest_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_DescribePlayerSessionsRequest_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DescribePlayerSessionsRequest_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDescribePlayerSessionsRequest_sdk_2eproto}, {}};

static void InitDefaultsBackfillMatchmakingRequest_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_BackfillMatchmakingRequest_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BackfillMatchmakingRequest_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBackfillMatchmakingRequest_sdk_2eproto}, {
      &scc_info_Player_sdk_2eproto.base,}};

static void InitDefaultsStopMatchmakingRequest_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_StopMatchmakingRequest_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopMatchmakingRequest_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopMatchmakingRequest_sdk_2eproto}, {}};

static void InitDefaultsGetInstanceCertificate_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_GetInstanceCertificate_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetInstanceCertificate_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetInstanceCertificate_sdk_2eproto}, {}};

static void InitDefaultsActivateGameSession_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_ActivateGameSession_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ActivateGameSession_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsActivateGameSession_sdk_2eproto}, {
      &scc_info_GameSession_sdk_2eproto.base,}};

static void InitDefaultsTerminateProcess_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_TerminateProcess_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TerminateProcess_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTerminateProcess_sdk_2eproto}, {}};

static void InitDefaultsDescribePlayerSessionsResponse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_DescribePlayerSessionsResponse_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DescribePlayerSessionsResponse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDescribePlayerSessionsResponse_sdk_2eproto}, {
      &scc_info_PlayerSession_sdk_2eproto.base,}};

static void InitDefaultsUpdateGameSession_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_UpdateGameSession_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateGameSession_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateGameSession_sdk_2eproto}, {
      &scc_info_GameSession_sdk_2eproto.base,}};

static void InitDefaultsGetInstanceCertificateResponse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_GetInstanceCertificateResponse_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetInstanceCertificateResponse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetInstanceCertificateResponse_sdk_2eproto}, {}};

static void InitDefaultsBackfillMatchmakingResponse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_BackfillMatchmakingResponse_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BackfillMatchmakingResponse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBackfillMatchmakingResponse_sdk_2eproto}, {}};

static void InitDefaultsResponse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_Response_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_sdk_2eproto}, {}};

static void InitDefaultsGameLiftResponse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_GameLiftResponse_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameLiftResponse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameLiftResponse_sdk_2eproto}, {}};

static void InitDefaultsGameSession_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_GameSession_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::GameSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::GameSession::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameSession_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameSession_sdk_2eproto}, {
      &scc_info_GameProperty_sdk_2eproto.base,}};

static void InitDefaultsGameProperty_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_GameProperty_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameProperty_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameProperty_sdk_2eproto}, {}};

static void InitDefaultsPlayerSession_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_PlayerSession_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerSession_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerSession_sdk_2eproto}, {}};

static void InitDefaultsPlayer_PlayerAttributesEntry_DoNotUse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_Player_PlayerAttributesEntry_DoNotUse_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse();
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Player_PlayerAttributesEntry_DoNotUse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayer_PlayerAttributesEntry_DoNotUse_sdk_2eproto}, {
      &scc_info_AttributeValue_sdk_2eproto.base,}};

static void InitDefaultsPlayer_LatencyInMsEntry_DoNotUse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_Player_LatencyInMsEntry_DoNotUse_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse();
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Player_LatencyInMsEntry_DoNotUse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayer_LatencyInMsEntry_DoNotUse_sdk_2eproto}, {}};

static void InitDefaultsPlayer_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_Player_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Player_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlayer_sdk_2eproto}, {
      &scc_info_Player_PlayerAttributesEntry_DoNotUse_sdk_2eproto.base,
      &scc_info_Player_LatencyInMsEntry_DoNotUse_sdk_2eproto.base,}};

static void InitDefaultsAttributeValue_SDMEntry_DoNotUse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_AttributeValue_SDMEntry_DoNotUse_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse();
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AttributeValue_SDMEntry_DoNotUse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAttributeValue_SDMEntry_DoNotUse_sdk_2eproto}, {}};

static void InitDefaultsAttributeValue_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::amazon::whitewater::auxproxy::pbuffer::_AttributeValue_default_instance_;
    new (ptr) ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AttributeValue_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAttributeValue_sdk_2eproto}, {
      &scc_info_AttributeValue_SDMEntry_DoNotUse_sdk_2eproto.base,}};

void InitDefaults_sdk_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ProcessReady_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProcessEnding_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameSessionActivate_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameSessionTerminate_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdatePlayerSessionCreationPolicy_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AcceptPlayerSession_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemovePlayerSession_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportHealth_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DescribePlayerSessionsRequest_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BackfillMatchmakingRequest_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopMatchmakingRequest_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetInstanceCertificate_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActivateGameSession_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TerminateProcess_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DescribePlayerSessionsResponse_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateGameSession_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetInstanceCertificateResponse_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BackfillMatchmakingResponse_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameLiftResponse_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameSession_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameProperty_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerSession_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Player_PlayerAttributesEntry_DoNotUse_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Player_LatencyInMsEntry_DoNotUse_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Player_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AttributeValue_SDMEntry_DoNotUse_sdk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AttributeValue_sdk_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_sdk_2eproto[28];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_sdk_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_sdk_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_sdk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady, logpathstoupload_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady, port_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady, maxconcurrentgamesessions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ProcessEnding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate, gamesessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate, maxplayers_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate, gamesessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy, gamesessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy, newplayersessioncreationpolicy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession, gamesessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession, playersessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession, gamesessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession, playersessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth, healthstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, gamesessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, playerid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, playersessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, playersessionstatusfilter_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, nexttoken_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest, ticketid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest, gamesessionarn_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest, matchmakingconfigurationarn_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest, ticketid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest, gamesessionarn_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest, matchmakingconfigurationarn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession, gamesession_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess, terminationtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse, nexttoken_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse, playersessions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession, gamesession_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession, updatereason_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession, backfillticketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse, certificatepath_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse, certificatechainpath_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse, privatekeypath_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse, hostname_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse, rootcertificatepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse, ticketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Response, status_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Response, errormessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse, status_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse, responsedata_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse, errormessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, gamesessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, fleetid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, name_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, maxplayers_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, joinable_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, gameproperties_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, ipaddress_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, port_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, gamesessiondata_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, matchmakerdata_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameSession, dnsname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameProperty, key_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::GameProperty, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, playersessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, playerid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, gamesessionid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, fleetid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, ipaddress_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, status_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, creationtime_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, terminationtime_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, port_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, playerdata_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession, dnsname_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player, playerid_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player, playerattributes_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player, team_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::Player, latencyinms_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue, type_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue, s_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue, n_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue, sl_),
  PROTOBUF_FIELD_OFFSET(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue, sdm_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady)},
  { 8, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::ProcessEnding)},
  { 13, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate)},
  { 21, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate)},
  { 27, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy)},
  { 34, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession)},
  { 41, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession)},
  { 48, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth)},
  { 54, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest)},
  { 65, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest)},
  { 74, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest)},
  { 82, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificate)},
  { 87, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession)},
  { 93, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess)},
  { 99, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse)},
  { 106, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession)},
  { 114, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse)},
  { 124, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse)},
  { 130, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::Response)},
  { 137, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse)},
  { 145, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::GameSession)},
  { 161, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::GameProperty)},
  { 168, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession)},
  { 184, 191, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse)},
  { 193, 200, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse)},
  { 202, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::Player)},
  { 211, 218, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse)},
  { 220, -1, sizeof(::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_ProcessReady_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_ProcessEnding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_GameSessionActivate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_GameSessionTerminate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_UpdatePlayerSessionCreationPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_AcceptPlayerSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_RemovePlayerSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_ReportHealth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_DescribePlayerSessionsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_BackfillMatchmakingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_StopMatchmakingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_GetInstanceCertificate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_ActivateGameSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_TerminateProcess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_DescribePlayerSessionsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_UpdateGameSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_GetInstanceCertificateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_BackfillMatchmakingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_GameLiftResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_GameSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_GameProperty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_PlayerSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_Player_PlayerAttributesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_Player_LatencyInMsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_AttributeValue_SDMEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::amazon::whitewater::auxproxy::pbuffer::_AttributeValue_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_sdk_2eproto = {
  {}, AddDescriptors_sdk_2eproto, "sdk.proto", schemas,
  file_default_instances, TableStruct_sdk_2eproto::offsets,
  file_level_metadata_sdk_2eproto, 28, file_level_enum_descriptors_sdk_2eproto, file_level_service_descriptors_sdk_2eproto,
};

const char descriptor_table_protodef_sdk_2eproto[] =
  "\n\tsdk.proto\022&com.amazon.whitewater.auxpr"
  "oxy.pbuffer\"Y\n\014ProcessReady\022\030\n\020logPathsT"
  "oUpload\030\001 \003(\t\022\014\n\004port\030\002 \001(\005\022!\n\031maxConcur"
  "rentGameSessions\030\003 \001(\005\"\017\n\rProcessEnding\""
  "N\n\023GameSessionActivate\022\025\n\rgameSessionId\030"
  "\001 \001(\t\022\022\n\nmaxPlayers\030\002 \001(\005\022\014\n\004port\030\003 \001(\005\""
  "-\n\024GameSessionTerminate\022\025\n\rgameSessionId"
  "\030\001 \001(\t\"b\n!UpdatePlayerSessionCreationPol"
  "icy\022\025\n\rgameSessionId\030\001 \001(\t\022&\n\036newPlayerS"
  "essionCreationPolicy\030\002 \001(\t\"E\n\023AcceptPlay"
  "erSession\022\025\n\rgameSessionId\030\001 \001(\t\022\027\n\017play"
  "erSessionId\030\002 \001(\t\"E\n\023RemovePlayerSession"
  "\022\025\n\rgameSessionId\030\001 \001(\t\022\027\n\017playerSession"
  "Id\030\002 \001(\t\"$\n\014ReportHealth\022\024\n\014healthStatus"
  "\030\001 \001(\010\"\246\001\n\035DescribePlayerSessionsRequest"
  "\022\025\n\rgameSessionId\030\001 \001(\t\022\020\n\010playerId\030\002 \001("
  "\t\022\027\n\017playerSessionId\030\003 \001(\t\022!\n\031playerSess"
  "ionStatusFilter\030\004 \001(\t\022\021\n\tnextToken\030\005 \001(\t"
  "\022\r\n\005limit\030\006 \001(\005\"\254\001\n\032BackfillMatchmakingR"
  "equest\022\020\n\010ticketId\030\001 \001(\t\022\026\n\016gameSessionA"
  "rn\030\002 \001(\t\022#\n\033matchmakingConfigurationArn\030"
  "\003 \001(\t\022\?\n\007players\030\004 \003(\0132..com.amazon.whit"
  "ewater.auxproxy.pbuffer.Player\"g\n\026StopMa"
  "tchmakingRequest\022\020\n\010ticketId\030\001 \001(\t\022\026\n\016ga"
  "meSessionArn\030\002 \001(\t\022#\n\033matchmakingConfigu"
  "rationArn\030\003 \001(\t\"\030\n\026GetInstanceCertificat"
  "e\"_\n\023ActivateGameSession\022H\n\013gameSession\030"
  "\001 \001(\01323.com.amazon.whitewater.auxproxy.p"
  "buffer.GameSession\"+\n\020TerminateProcess\022\027"
  "\n\017terminationTime\030\001 \001(\003\"\202\001\n\036DescribePlay"
  "erSessionsResponse\022\021\n\tnextToken\030\001 \001(\t\022M\n"
  "\016playerSessions\030\002 \003(\01325.com.amazon.white"
  "water.auxproxy.pbuffer.PlayerSession\"\215\001\n"
  "\021UpdateGameSession\022H\n\013gameSession\030\001 \001(\0132"
  "3.com.amazon.whitewater.auxproxy.pbuffer"
  ".GameSession\022\024\n\014updateReason\030\002 \001(\t\022\030\n\020ba"
  "ckfillTicketId\030\003 \001(\t\"\236\001\n\036GetInstanceCert"
  "ificateResponse\022\027\n\017certificatePath\030\001 \001(\t"
  "\022\034\n\024certificateChainPath\030\002 \001(\t\022\026\n\016privat"
  "eKeyPath\030\003 \001(\t\022\020\n\010hostName\030\004 \001(\t\022\033\n\023root"
  "CertificatePath\030\005 \001(\t\"/\n\033BackfillMatchma"
  "kingResponse\022\020\n\010ticketId\030\001 \001(\t\"\206\001\n\010Respo"
  "nse\022G\n\006status\030\001 \001(\01627.com.amazon.whitewa"
  "ter.auxproxy.pbuffer.Response.Status\022\024\n\014"
  "errorMessage\030\002 \001(\t\"\033\n\006Status\022\006\n\002OK\020\000\022\t\n\005"
  "ERROR\020\001\"\277\001\n\020GameLiftResponse\022O\n\006status\030\001"
  " \001(\0162\?.com.amazon.whitewater.auxproxy.pb"
  "uffer.GameLiftResponse.Status\022\024\n\014respons"
  "eData\030\002 \001(\t\022\024\n\014errorMessage\030\003 \001(\t\".\n\006Sta"
  "tus\022\006\n\002OK\020\000\022\r\n\tERROR_400\020\001\022\r\n\tERROR_500\020"
  "\002\"\232\002\n\013GameSession\022\025\n\rgameSessionId\030\001 \001(\t"
  "\022\017\n\007fleetId\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\022\n\nmaxPl"
  "ayers\030\004 \001(\005\022\020\n\010joinable\030\005 \001(\010\022L\n\016gamePro"
  "perties\030\006 \003(\01324.com.amazon.whitewater.au"
  "xproxy.pbuffer.GameProperty\022\021\n\tipAddress"
  "\030\007 \001(\t\022\014\n\004port\030\010 \001(\005\022\027\n\017gameSessionData\030"
  "\t \001(\t\022\026\n\016matchmakerData\030\n \001(\t\022\017\n\007dnsName"
  "\030\013 \001(\t\"*\n\014GameProperty\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\t\"\347\001\n\rPlayerSession\022\027\n\017playerSe"
  "ssionId\030\001 \001(\t\022\020\n\010playerId\030\002 \001(\t\022\025\n\rgameS"
  "essionId\030\003 \001(\t\022\017\n\007fleetId\030\004 \001(\t\022\021\n\tipAdd"
  "ress\030\005 \001(\t\022\016\n\006status\030\006 \001(\t\022\024\n\014creationTi"
  "me\030\007 \001(\003\022\027\n\017terminationTime\030\010 \001(\003\022\014\n\004por"
  "t\030\t \001(\005\022\022\n\nplayerData\030\n \001(\t\022\017\n\007dnsName\030\013"
  " \001(\t\"\203\003\n\006Player\022\020\n\010playerId\030\001 \001(\t\022^\n\020pla"
  "yerAttributes\030\002 \003(\0132D.com.amazon.whitewa"
  "ter.auxproxy.pbuffer.Player.PlayerAttrib"
  "utesEntry\022\014\n\004team\030\003 \001(\t\022T\n\013latencyInMs\030\004"
  " \003(\0132\?.com.amazon.whitewater.auxproxy.pb"
  "uffer.Player.LatencyInMsEntry\032o\n\025PlayerA"
  "ttributesEntry\022\013\n\003key\030\001 \001(\t\022E\n\005value\030\002 \001"
  "(\01326.com.amazon.whitewater.auxproxy.pbuf"
  "fer.AttributeValue:\0028\001\0322\n\020LatencyInMsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"\272\001\n\016A"
  "ttributeValue\022\014\n\004type\030\001 \001(\005\022\t\n\001S\030\002 \001(\t\022\t"
  "\n\001N\030\003 \001(\001\022\n\n\002SL\030\004 \003(\t\022L\n\003SDM\030\005 \003(\0132\?.com"
  ".amazon.whitewater.auxproxy.pbuffer.Attr"
  "ibuteValue.SDMEntry\032*\n\010SDMEntry\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_sdk_2eproto = {
  false, InitDefaults_sdk_2eproto, 
  descriptor_table_protodef_sdk_2eproto,
  "sdk.proto", &assign_descriptors_table_sdk_2eproto, 3151,
};

void AddDescriptors_sdk_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_sdk_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sdk_2eproto = []() { AddDescriptors_sdk_2eproto(); return true; }();
namespace com {
namespace amazon {
namespace whitewater {
namespace auxproxy {
namespace pbuffer {
const ::google::protobuf::EnumDescriptor* Response_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_sdk_2eproto);
  return file_level_enum_descriptors_sdk_2eproto[0];
}
bool Response_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Response_Status Response::OK;
const Response_Status Response::ERROR;
const Response_Status Response::Status_MIN;
const Response_Status Response::Status_MAX;
const int Response::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GameLiftResponse_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_sdk_2eproto);
  return file_level_enum_descriptors_sdk_2eproto[1];
}
bool GameLiftResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GameLiftResponse_Status GameLiftResponse::OK;
const GameLiftResponse_Status GameLiftResponse::ERROR_400;
const GameLiftResponse_Status GameLiftResponse::ERROR_500;
const GameLiftResponse_Status GameLiftResponse::Status_MIN;
const GameLiftResponse_Status GameLiftResponse::Status_MAX;
const int GameLiftResponse::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ProcessReady::InitAsDefaultInstance() {
}
class ProcessReady::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessReady::kLogPathsToUploadFieldNumber;
const int ProcessReady::kPortFieldNumber;
const int ProcessReady::kMaxConcurrentGameSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessReady::ProcessReady()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
}
ProcessReady::ProcessReady(const ProcessReady& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      logpathstoupload_(from.logpathstoupload_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxconcurrentgamesessions_) -
    reinterpret_cast<char*>(&port_)) + sizeof(maxconcurrentgamesessions_));
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
}

void ProcessReady::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProcessReady_sdk_2eproto.base);
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxconcurrentgamesessions_) -
      reinterpret_cast<char*>(&port_)) + sizeof(maxconcurrentgamesessions_));
}

ProcessReady::~ProcessReady() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  SharedDtor();
}

void ProcessReady::SharedDtor() {
}

void ProcessReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessReady& ProcessReady::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProcessReady_sdk_2eproto.base);
  return *internal_default_instance();
}


void ProcessReady::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logpathstoupload_.Clear();
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxconcurrentgamesessions_) -
      reinterpret_cast<char*>(&port_)) + sizeof(maxconcurrentgamesessions_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProcessReady::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProcessReady*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string logPathsToUpload = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload");
          object = msg->add_logpathstoupload();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // int32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 maxConcurrentGameSessions = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_maxconcurrentgamesessions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProcessReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string logPathsToUpload = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_logpathstoupload()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logpathstoupload(this->logpathstoupload_size() - 1).data(),
            static_cast<int>(this->logpathstoupload(this->logpathstoupload_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxConcurrentGameSessions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxconcurrentgamesessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProcessReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string logPathsToUpload = 1;
  for (int i = 0, n = this->logpathstoupload_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logpathstoupload(i).data(), static_cast<int>(this->logpathstoupload(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->logpathstoupload(i), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // int32 maxConcurrentGameSessions = 3;
  if (this->maxconcurrentgamesessions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxconcurrentgamesessions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
}

::google::protobuf::uint8* ProcessReady::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string logPathsToUpload = 1;
  for (int i = 0, n = this->logpathstoupload_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logpathstoupload(i).data(), static_cast<int>(this->logpathstoupload(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->logpathstoupload(i), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // int32 maxConcurrentGameSessions = 3;
  if (this->maxconcurrentgamesessions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxconcurrentgamesessions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  return target;
}

size_t ProcessReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string logPathsToUpload = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->logpathstoupload_size());
  for (int i = 0, n = this->logpathstoupload_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->logpathstoupload(i));
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 maxConcurrentGameSessions = 3;
  if (this->maxconcurrentgamesessions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxconcurrentgamesessions());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessReady* source =
      ::google::protobuf::DynamicCastToGenerated<ProcessReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
    MergeFrom(*source);
  }
}

void ProcessReady::MergeFrom(const ProcessReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logpathstoupload_.MergeFrom(from.logpathstoupload_);
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.maxconcurrentgamesessions() != 0) {
    set_maxconcurrentgamesessions(from.maxconcurrentgamesessions());
  }
}

void ProcessReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessReady::CopyFrom(const ProcessReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessReady::IsInitialized() const {
  return true;
}

void ProcessReady::Swap(ProcessReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessReady::InternalSwap(ProcessReady* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  logpathstoupload_.InternalSwap(CastToBase(&other->logpathstoupload_));
  swap(port_, other->port_);
  swap(maxconcurrentgamesessions_, other->maxconcurrentgamesessions_);
}

::google::protobuf::Metadata ProcessReady::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProcessEnding::InitAsDefaultInstance() {
}
class ProcessEnding::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessEnding::ProcessEnding()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
}
ProcessEnding::ProcessEnding(const ProcessEnding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
}

void ProcessEnding::SharedCtor() {
}

ProcessEnding::~ProcessEnding() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  SharedDtor();
}

void ProcessEnding::SharedDtor() {
}

void ProcessEnding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessEnding& ProcessEnding::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProcessEnding_sdk_2eproto.base);
  return *internal_default_instance();
}


void ProcessEnding::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProcessEnding::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProcessEnding*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProcessEnding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProcessEnding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
}

::google::protobuf::uint8* ProcessEnding::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  return target;
}

size_t ProcessEnding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessEnding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessEnding* source =
      ::google::protobuf::DynamicCastToGenerated<ProcessEnding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
    MergeFrom(*source);
  }
}

void ProcessEnding::MergeFrom(const ProcessEnding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProcessEnding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessEnding::CopyFrom(const ProcessEnding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessEnding::IsInitialized() const {
  return true;
}

void ProcessEnding::Swap(ProcessEnding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessEnding::InternalSwap(ProcessEnding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProcessEnding::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameSessionActivate::InitAsDefaultInstance() {
}
class GameSessionActivate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSessionActivate::kGameSessionIdFieldNumber;
const int GameSessionActivate::kMaxPlayersFieldNumber;
const int GameSessionActivate::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSessionActivate::GameSessionActivate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
}
GameSessionActivate::GameSessionActivate(const GameSessionActivate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  ::memcpy(&maxplayers_, &from.maxplayers_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&maxplayers_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
}

void GameSessionActivate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameSessionActivate_sdk_2eproto.base);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxplayers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&maxplayers_)) + sizeof(port_));
}

GameSessionActivate::~GameSessionActivate() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  SharedDtor();
}

void GameSessionActivate::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameSessionActivate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSessionActivate& GameSessionActivate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameSessionActivate_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameSessionActivate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxplayers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&maxplayers_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameSessionActivate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameSessionActivate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId");
        object = msg->mutable_gamesessionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 maxPlayers = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_maxplayers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameSessionActivate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxPlayers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameSessionActivate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // int32 maxPlayers = 2;
  if (this->maxplayers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxplayers(), output);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
}

::google::protobuf::uint8* GameSessionActivate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // int32 maxPlayers = 2;
  if (this->maxplayers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxplayers(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  return target;
}

size_t GameSessionActivate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  // int32 maxPlayers = 2;
  if (this->maxplayers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxplayers());
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSessionActivate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSessionActivate* source =
      ::google::protobuf::DynamicCastToGenerated<GameSessionActivate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
    MergeFrom(*source);
  }
}

void GameSessionActivate::MergeFrom(const GameSessionActivate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  if (from.maxplayers() != 0) {
    set_maxplayers(from.maxplayers());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void GameSessionActivate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSessionActivate::CopyFrom(const GameSessionActivate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSessionActivate::IsInitialized() const {
  return true;
}

void GameSessionActivate::Swap(GameSessionActivate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSessionActivate::InternalSwap(GameSessionActivate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gamesessionid_.Swap(&other->gamesessionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maxplayers_, other->maxplayers_);
  swap(port_, other->port_);
}

::google::protobuf::Metadata GameSessionActivate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameSessionTerminate::InitAsDefaultInstance() {
}
class GameSessionTerminate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSessionTerminate::kGameSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSessionTerminate::GameSessionTerminate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
}
GameSessionTerminate::GameSessionTerminate(const GameSessionTerminate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
}

void GameSessionTerminate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameSessionTerminate_sdk_2eproto.base);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameSessionTerminate::~GameSessionTerminate() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  SharedDtor();
}

void GameSessionTerminate::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameSessionTerminate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSessionTerminate& GameSessionTerminate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameSessionTerminate_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameSessionTerminate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameSessionTerminate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameSessionTerminate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId");
        object = msg->mutable_gamesessionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameSessionTerminate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameSessionTerminate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
}

::google::protobuf::uint8* GameSessionTerminate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  return target;
}

size_t GameSessionTerminate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSessionTerminate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSessionTerminate* source =
      ::google::protobuf::DynamicCastToGenerated<GameSessionTerminate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
    MergeFrom(*source);
  }
}

void GameSessionTerminate::MergeFrom(const GameSessionTerminate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
}

void GameSessionTerminate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSessionTerminate::CopyFrom(const GameSessionTerminate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSessionTerminate::IsInitialized() const {
  return true;
}

void GameSessionTerminate::Swap(GameSessionTerminate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSessionTerminate::InternalSwap(GameSessionTerminate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gamesessionid_.Swap(&other->gamesessionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GameSessionTerminate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdatePlayerSessionCreationPolicy::InitAsDefaultInstance() {
}
class UpdatePlayerSessionCreationPolicy::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdatePlayerSessionCreationPolicy::kGameSessionIdFieldNumber;
const int UpdatePlayerSessionCreationPolicy::kNewPlayerSessionCreationPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdatePlayerSessionCreationPolicy::UpdatePlayerSessionCreationPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
}
UpdatePlayerSessionCreationPolicy::UpdatePlayerSessionCreationPolicy(const UpdatePlayerSessionCreationPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  newplayersessioncreationpolicy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.newplayersessioncreationpolicy().size() > 0) {
    newplayersessioncreationpolicy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newplayersessioncreationpolicy_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
}

void UpdatePlayerSessionCreationPolicy::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdatePlayerSessionCreationPolicy_sdk_2eproto.base);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newplayersessioncreationpolicy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdatePlayerSessionCreationPolicy::~UpdatePlayerSessionCreationPolicy() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  SharedDtor();
}

void UpdatePlayerSessionCreationPolicy::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newplayersessioncreationpolicy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdatePlayerSessionCreationPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePlayerSessionCreationPolicy& UpdatePlayerSessionCreationPolicy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdatePlayerSessionCreationPolicy_sdk_2eproto.base);
  return *internal_default_instance();
}


void UpdatePlayerSessionCreationPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newplayersessioncreationpolicy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdatePlayerSessionCreationPolicy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdatePlayerSessionCreationPolicy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId");
        object = msg->mutable_gamesessionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string newPlayerSessionCreationPolicy = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy");
        object = msg->mutable_newplayersessioncreationpolicy();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdatePlayerSessionCreationPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string newPlayerSessionCreationPolicy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newplayersessioncreationpolicy()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->newplayersessioncreationpolicy().data(), static_cast<int>(this->newplayersessioncreationpolicy().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdatePlayerSessionCreationPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // string newPlayerSessionCreationPolicy = 2;
  if (this->newplayersessioncreationpolicy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->newplayersessioncreationpolicy().data(), static_cast<int>(this->newplayersessioncreationpolicy().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->newplayersessioncreationpolicy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
}

::google::protobuf::uint8* UpdatePlayerSessionCreationPolicy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // string newPlayerSessionCreationPolicy = 2;
  if (this->newplayersessioncreationpolicy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->newplayersessioncreationpolicy().data(), static_cast<int>(this->newplayersessioncreationpolicy().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newplayersessioncreationpolicy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  return target;
}

size_t UpdatePlayerSessionCreationPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  // string newPlayerSessionCreationPolicy = 2;
  if (this->newplayersessioncreationpolicy().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->newplayersessioncreationpolicy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePlayerSessionCreationPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlayerSessionCreationPolicy* source =
      ::google::protobuf::DynamicCastToGenerated<UpdatePlayerSessionCreationPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
    MergeFrom(*source);
  }
}

void UpdatePlayerSessionCreationPolicy::MergeFrom(const UpdatePlayerSessionCreationPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  if (from.newplayersessioncreationpolicy().size() > 0) {

    newplayersessioncreationpolicy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newplayersessioncreationpolicy_);
  }
}

void UpdatePlayerSessionCreationPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerSessionCreationPolicy::CopyFrom(const UpdatePlayerSessionCreationPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerSessionCreationPolicy::IsInitialized() const {
  return true;
}

void UpdatePlayerSessionCreationPolicy::Swap(UpdatePlayerSessionCreationPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdatePlayerSessionCreationPolicy::InternalSwap(UpdatePlayerSessionCreationPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gamesessionid_.Swap(&other->gamesessionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  newplayersessioncreationpolicy_.Swap(&other->newplayersessioncreationpolicy_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata UpdatePlayerSessionCreationPolicy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AcceptPlayerSession::InitAsDefaultInstance() {
}
class AcceptPlayerSession::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptPlayerSession::kGameSessionIdFieldNumber;
const int AcceptPlayerSession::kPlayerSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptPlayerSession::AcceptPlayerSession()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
}
AcceptPlayerSession::AcceptPlayerSession(const AcceptPlayerSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playersessionid().size() > 0) {
    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
}

void AcceptPlayerSession::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AcceptPlayerSession_sdk_2eproto.base);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AcceptPlayerSession::~AcceptPlayerSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  SharedDtor();
}

void AcceptPlayerSession::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcceptPlayerSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptPlayerSession& AcceptPlayerSession::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AcceptPlayerSession_sdk_2eproto.base);
  return *internal_default_instance();
}


void AcceptPlayerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AcceptPlayerSession::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AcceptPlayerSession*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId");
        object = msg->mutable_gamesessionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string playerSessionId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId");
        object = msg->mutable_playersessionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AcceptPlayerSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerSessionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playersessionid().data(), static_cast<int>(this->playersessionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AcceptPlayerSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), static_cast<int>(this->playersessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playersessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
}

::google::protobuf::uint8* AcceptPlayerSession::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), static_cast<int>(this->playersessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playersessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  return target;
}

size_t AcceptPlayerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playersessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptPlayerSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptPlayerSession* source =
      ::google::protobuf::DynamicCastToGenerated<AcceptPlayerSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
    MergeFrom(*source);
  }
}

void AcceptPlayerSession::MergeFrom(const AcceptPlayerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  if (from.playersessionid().size() > 0) {

    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
}

void AcceptPlayerSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptPlayerSession::CopyFrom(const AcceptPlayerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptPlayerSession::IsInitialized() const {
  return true;
}

void AcceptPlayerSession::Swap(AcceptPlayerSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptPlayerSession::InternalSwap(AcceptPlayerSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gamesessionid_.Swap(&other->gamesessionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playersessionid_.Swap(&other->playersessionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata AcceptPlayerSession::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RemovePlayerSession::InitAsDefaultInstance() {
}
class RemovePlayerSession::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemovePlayerSession::kGameSessionIdFieldNumber;
const int RemovePlayerSession::kPlayerSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemovePlayerSession::RemovePlayerSession()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
}
RemovePlayerSession::RemovePlayerSession(const RemovePlayerSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playersessionid().size() > 0) {
    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
}

void RemovePlayerSession::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RemovePlayerSession_sdk_2eproto.base);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RemovePlayerSession::~RemovePlayerSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  SharedDtor();
}

void RemovePlayerSession::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemovePlayerSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemovePlayerSession& RemovePlayerSession::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RemovePlayerSession_sdk_2eproto.base);
  return *internal_default_instance();
}


void RemovePlayerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemovePlayerSession::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RemovePlayerSession*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId");
        object = msg->mutable_gamesessionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string playerSessionId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId");
        object = msg->mutable_playersessionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemovePlayerSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerSessionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playersessionid().data(), static_cast<int>(this->playersessionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemovePlayerSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), static_cast<int>(this->playersessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playersessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
}

::google::protobuf::uint8* RemovePlayerSession::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), static_cast<int>(this->playersessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playersessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  return target;
}

size_t RemovePlayerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playersessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovePlayerSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePlayerSession* source =
      ::google::protobuf::DynamicCastToGenerated<RemovePlayerSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
    MergeFrom(*source);
  }
}

void RemovePlayerSession::MergeFrom(const RemovePlayerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  if (from.playersessionid().size() > 0) {

    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
}

void RemovePlayerSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePlayerSession::CopyFrom(const RemovePlayerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePlayerSession::IsInitialized() const {
  return true;
}

void RemovePlayerSession::Swap(RemovePlayerSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemovePlayerSession::InternalSwap(RemovePlayerSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gamesessionid_.Swap(&other->gamesessionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playersessionid_.Swap(&other->playersessionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata RemovePlayerSession::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReportHealth::InitAsDefaultInstance() {
}
class ReportHealth::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportHealth::kHealthStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportHealth::ReportHealth()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
}
ReportHealth::ReportHealth(const ReportHealth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  healthstatus_ = from.healthstatus_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
}

void ReportHealth::SharedCtor() {
  healthstatus_ = false;
}

ReportHealth::~ReportHealth() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  SharedDtor();
}

void ReportHealth::SharedDtor() {
}

void ReportHealth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportHealth& ReportHealth::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReportHealth_sdk_2eproto.base);
  return *internal_default_instance();
}


void ReportHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  healthstatus_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportHealth::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReportHealth*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool healthStatus = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_healthstatus(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportHealth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool healthStatus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &healthstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportHealth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool healthStatus = 1;
  if (this->healthstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->healthstatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
}

::google::protobuf::uint8* ReportHealth::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool healthStatus = 1;
  if (this->healthstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->healthstatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  return target;
}

size_t ReportHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool healthStatus = 1;
  if (this->healthstatus() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportHealth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportHealth* source =
      ::google::protobuf::DynamicCastToGenerated<ReportHealth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
    MergeFrom(*source);
  }
}

void ReportHealth::MergeFrom(const ReportHealth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.healthstatus() != 0) {
    set_healthstatus(from.healthstatus());
  }
}

void ReportHealth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportHealth::CopyFrom(const ReportHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportHealth::IsInitialized() const {
  return true;
}

void ReportHealth::Swap(ReportHealth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportHealth::InternalSwap(ReportHealth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(healthstatus_, other->healthstatus_);
}

::google::protobuf::Metadata ReportHealth::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DescribePlayerSessionsRequest::InitAsDefaultInstance() {
}
class DescribePlayerSessionsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DescribePlayerSessionsRequest::kGameSessionIdFieldNumber;
const int DescribePlayerSessionsRequest::kPlayerIdFieldNumber;
const int DescribePlayerSessionsRequest::kPlayerSessionIdFieldNumber;
const int DescribePlayerSessionsRequest::kPlayerSessionStatusFilterFieldNumber;
const int DescribePlayerSessionsRequest::kNextTokenFieldNumber;
const int DescribePlayerSessionsRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DescribePlayerSessionsRequest::DescribePlayerSessionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
}
DescribePlayerSessionsRequest::DescribePlayerSessionsRequest(const DescribePlayerSessionsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playerid().size() > 0) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playersessionid().size() > 0) {
    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  playersessionstatusfilter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playersessionstatusfilter().size() > 0) {
    playersessionstatusfilter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionstatusfilter_);
  }
  nexttoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nexttoken().size() > 0) {
    nexttoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexttoken_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
}

void DescribePlayerSessionsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DescribePlayerSessionsRequest_sdk_2eproto.base);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionstatusfilter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nexttoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

DescribePlayerSessionsRequest::~DescribePlayerSessionsRequest() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  SharedDtor();
}

void DescribePlayerSessionsRequest::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionstatusfilter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nexttoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DescribePlayerSessionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribePlayerSessionsRequest& DescribePlayerSessionsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DescribePlayerSessionsRequest_sdk_2eproto.base);
  return *internal_default_instance();
}


void DescribePlayerSessionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionstatusfilter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nexttoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DescribePlayerSessionsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DescribePlayerSessionsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId");
        object = msg->mutable_gamesessionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId");
        object = msg->mutable_playerid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string playerSessionId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId");
        object = msg->mutable_playersessionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string playerSessionStatusFilter = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter");
        object = msg->mutable_playersessionstatusfilter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string nextToken = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken");
        object = msg->mutable_nexttoken();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 limit = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DescribePlayerSessionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerSessionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playersessionid().data(), static_cast<int>(this->playersessionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerSessionStatusFilter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionstatusfilter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playersessionstatusfilter().data(), static_cast<int>(this->playersessionstatusfilter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nextToken = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nexttoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nexttoken().data(), static_cast<int>(this->nexttoken().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DescribePlayerSessionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playerid(), output);
  }

  // string playerSessionId = 3;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), static_cast<int>(this->playersessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playersessionid(), output);
  }

  // string playerSessionStatusFilter = 4;
  if (this->playersessionstatusfilter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionstatusfilter().data(), static_cast<int>(this->playersessionstatusfilter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->playersessionstatusfilter(), output);
  }

  // string nextToken = 5;
  if (this->nexttoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nexttoken().data(), static_cast<int>(this->nexttoken().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nexttoken(), output);
  }

  // int32 limit = 6;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
}

::google::protobuf::uint8* DescribePlayerSessionsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playerid(), target);
  }

  // string playerSessionId = 3;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), static_cast<int>(this->playersessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playersessionid(), target);
  }

  // string playerSessionStatusFilter = 4;
  if (this->playersessionstatusfilter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionstatusfilter().data(), static_cast<int>(this->playersessionstatusfilter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->playersessionstatusfilter(), target);
  }

  // string nextToken = 5;
  if (this->nexttoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nexttoken().data(), static_cast<int>(this->nexttoken().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nexttoken(), target);
  }

  // int32 limit = 6;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  return target;
}

size_t DescribePlayerSessionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerid());
  }

  // string playerSessionId = 3;
  if (this->playersessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playersessionid());
  }

  // string playerSessionStatusFilter = 4;
  if (this->playersessionstatusfilter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playersessionstatusfilter());
  }

  // string nextToken = 5;
  if (this->nexttoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nexttoken());
  }

  // int32 limit = 6;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribePlayerSessionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribePlayerSessionsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DescribePlayerSessionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
    MergeFrom(*source);
  }
}

void DescribePlayerSessionsRequest::MergeFrom(const DescribePlayerSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  if (from.playerid().size() > 0) {

    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  if (from.playersessionid().size() > 0) {

    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  if (from.playersessionstatusfilter().size() > 0) {

    playersessionstatusfilter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionstatusfilter_);
  }
  if (from.nexttoken().size() > 0) {

    nexttoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexttoken_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void DescribePlayerSessionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribePlayerSessionsRequest::CopyFrom(const DescribePlayerSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribePlayerSessionsRequest::IsInitialized() const {
  return true;
}

void DescribePlayerSessionsRequest::Swap(DescribePlayerSessionsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DescribePlayerSessionsRequest::InternalSwap(DescribePlayerSessionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gamesessionid_.Swap(&other->gamesessionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playerid_.Swap(&other->playerid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playersessionid_.Swap(&other->playersessionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playersessionstatusfilter_.Swap(&other->playersessionstatusfilter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nexttoken_.Swap(&other->nexttoken_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata DescribePlayerSessionsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BackfillMatchmakingRequest::InitAsDefaultInstance() {
}
class BackfillMatchmakingRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackfillMatchmakingRequest::kTicketIdFieldNumber;
const int BackfillMatchmakingRequest::kGameSessionArnFieldNumber;
const int BackfillMatchmakingRequest::kMatchmakingConfigurationArnFieldNumber;
const int BackfillMatchmakingRequest::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackfillMatchmakingRequest::BackfillMatchmakingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
}
BackfillMatchmakingRequest::BackfillMatchmakingRequest(const BackfillMatchmakingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticketid().size() > 0) {
    ticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticketid_);
  }
  gamesessionarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionarn().size() > 0) {
    gamesessionarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionarn_);
  }
  matchmakingconfigurationarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.matchmakingconfigurationarn().size() > 0) {
    matchmakingconfigurationarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matchmakingconfigurationarn_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
}

void BackfillMatchmakingRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BackfillMatchmakingRequest_sdk_2eproto.base);
  ticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BackfillMatchmakingRequest::~BackfillMatchmakingRequest() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  SharedDtor();
}

void BackfillMatchmakingRequest::SharedDtor() {
  ticketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BackfillMatchmakingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackfillMatchmakingRequest& BackfillMatchmakingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BackfillMatchmakingRequest_sdk_2eproto.base);
  return *internal_default_instance();
}


void BackfillMatchmakingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  ticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BackfillMatchmakingRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BackfillMatchmakingRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ticketId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId");
        object = msg->mutable_ticketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string gameSessionArn = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn");
        object = msg->mutable_gamesessionarn();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string matchmakingConfigurationArn = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn");
        object = msg->mutable_matchmakingconfigurationarn();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::amazon::whitewater::auxproxy::pbuffer::Player::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BackfillMatchmakingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ticketId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticketid().data(), static_cast<int>(this->ticketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gameSessionArn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionarn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionarn().data(), static_cast<int>(this->gamesessionarn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string matchmakingConfigurationArn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchmakingconfigurationarn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matchmakingconfigurationarn().data(), static_cast<int>(this->matchmakingconfigurationarn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BackfillMatchmakingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticketid().data(), static_cast<int>(this->ticketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ticketid(), output);
  }

  // string gameSessionArn = 2;
  if (this->gamesessionarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionarn().data(), static_cast<int>(this->gamesessionarn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gamesessionarn(), output);
  }

  // string matchmakingConfigurationArn = 3;
  if (this->matchmakingconfigurationarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matchmakingconfigurationarn().data(), static_cast<int>(this->matchmakingconfigurationarn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->matchmakingconfigurationarn(), output);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->players(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
}

::google::protobuf::uint8* BackfillMatchmakingRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticketid().data(), static_cast<int>(this->ticketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ticketid(), target);
  }

  // string gameSessionArn = 2;
  if (this->gamesessionarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionarn().data(), static_cast<int>(this->gamesessionarn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gamesessionarn(), target);
  }

  // string matchmakingConfigurationArn = 3;
  if (this->matchmakingconfigurationarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matchmakingconfigurationarn().data(), static_cast<int>(this->matchmakingconfigurationarn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->matchmakingconfigurationarn(), target);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->players(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  return target;
}

size_t BackfillMatchmakingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticketid());
  }

  // string gameSessionArn = 2;
  if (this->gamesessionarn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionarn());
  }

  // string matchmakingConfigurationArn = 3;
  if (this->matchmakingconfigurationarn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matchmakingconfigurationarn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackfillMatchmakingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BackfillMatchmakingRequest* source =
      ::google::protobuf::DynamicCastToGenerated<BackfillMatchmakingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
    MergeFrom(*source);
  }
}

void BackfillMatchmakingRequest::MergeFrom(const BackfillMatchmakingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.ticketid().size() > 0) {

    ticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticketid_);
  }
  if (from.gamesessionarn().size() > 0) {

    gamesessionarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionarn_);
  }
  if (from.matchmakingconfigurationarn().size() > 0) {

    matchmakingconfigurationarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matchmakingconfigurationarn_);
  }
}

void BackfillMatchmakingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackfillMatchmakingRequest::CopyFrom(const BackfillMatchmakingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackfillMatchmakingRequest::IsInitialized() const {
  return true;
}

void BackfillMatchmakingRequest::Swap(BackfillMatchmakingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackfillMatchmakingRequest::InternalSwap(BackfillMatchmakingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  ticketid_.Swap(&other->ticketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gamesessionarn_.Swap(&other->gamesessionarn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  matchmakingconfigurationarn_.Swap(&other->matchmakingconfigurationarn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BackfillMatchmakingRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StopMatchmakingRequest::InitAsDefaultInstance() {
}
class StopMatchmakingRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopMatchmakingRequest::kTicketIdFieldNumber;
const int StopMatchmakingRequest::kGameSessionArnFieldNumber;
const int StopMatchmakingRequest::kMatchmakingConfigurationArnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopMatchmakingRequest::StopMatchmakingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
}
StopMatchmakingRequest::StopMatchmakingRequest(const StopMatchmakingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticketid().size() > 0) {
    ticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticketid_);
  }
  gamesessionarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionarn().size() > 0) {
    gamesessionarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionarn_);
  }
  matchmakingconfigurationarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.matchmakingconfigurationarn().size() > 0) {
    matchmakingconfigurationarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matchmakingconfigurationarn_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
}

void StopMatchmakingRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StopMatchmakingRequest_sdk_2eproto.base);
  ticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StopMatchmakingRequest::~StopMatchmakingRequest() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  SharedDtor();
}

void StopMatchmakingRequest::SharedDtor() {
  ticketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StopMatchmakingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopMatchmakingRequest& StopMatchmakingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StopMatchmakingRequest_sdk_2eproto.base);
  return *internal_default_instance();
}


void StopMatchmakingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopMatchmakingRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StopMatchmakingRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ticketId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId");
        object = msg->mutable_ticketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string gameSessionArn = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn");
        object = msg->mutable_gamesessionarn();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string matchmakingConfigurationArn = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn");
        object = msg->mutable_matchmakingconfigurationarn();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopMatchmakingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ticketId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticketid().data(), static_cast<int>(this->ticketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gameSessionArn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionarn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionarn().data(), static_cast<int>(this->gamesessionarn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string matchmakingConfigurationArn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchmakingconfigurationarn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matchmakingconfigurationarn().data(), static_cast<int>(this->matchmakingconfigurationarn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopMatchmakingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticketid().data(), static_cast<int>(this->ticketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ticketid(), output);
  }

  // string gameSessionArn = 2;
  if (this->gamesessionarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionarn().data(), static_cast<int>(this->gamesessionarn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gamesessionarn(), output);
  }

  // string matchmakingConfigurationArn = 3;
  if (this->matchmakingconfigurationarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matchmakingconfigurationarn().data(), static_cast<int>(this->matchmakingconfigurationarn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->matchmakingconfigurationarn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
}

::google::protobuf::uint8* StopMatchmakingRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticketid().data(), static_cast<int>(this->ticketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ticketid(), target);
  }

  // string gameSessionArn = 2;
  if (this->gamesessionarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionarn().data(), static_cast<int>(this->gamesessionarn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gamesessionarn(), target);
  }

  // string matchmakingConfigurationArn = 3;
  if (this->matchmakingconfigurationarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matchmakingconfigurationarn().data(), static_cast<int>(this->matchmakingconfigurationarn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->matchmakingconfigurationarn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  return target;
}

size_t StopMatchmakingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticketid());
  }

  // string gameSessionArn = 2;
  if (this->gamesessionarn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionarn());
  }

  // string matchmakingConfigurationArn = 3;
  if (this->matchmakingconfigurationarn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matchmakingconfigurationarn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopMatchmakingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopMatchmakingRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StopMatchmakingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
    MergeFrom(*source);
  }
}

void StopMatchmakingRequest::MergeFrom(const StopMatchmakingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticketid().size() > 0) {

    ticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticketid_);
  }
  if (from.gamesessionarn().size() > 0) {

    gamesessionarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionarn_);
  }
  if (from.matchmakingconfigurationarn().size() > 0) {

    matchmakingconfigurationarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matchmakingconfigurationarn_);
  }
}

void StopMatchmakingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopMatchmakingRequest::CopyFrom(const StopMatchmakingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopMatchmakingRequest::IsInitialized() const {
  return true;
}

void StopMatchmakingRequest::Swap(StopMatchmakingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopMatchmakingRequest::InternalSwap(StopMatchmakingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ticketid_.Swap(&other->ticketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gamesessionarn_.Swap(&other->gamesessionarn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  matchmakingconfigurationarn_.Swap(&other->matchmakingconfigurationarn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata StopMatchmakingRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetInstanceCertificate::InitAsDefaultInstance() {
}
class GetInstanceCertificate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInstanceCertificate::GetInstanceCertificate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
}
GetInstanceCertificate::GetInstanceCertificate(const GetInstanceCertificate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
}

void GetInstanceCertificate::SharedCtor() {
}

GetInstanceCertificate::~GetInstanceCertificate() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  SharedDtor();
}

void GetInstanceCertificate::SharedDtor() {
}

void GetInstanceCertificate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInstanceCertificate& GetInstanceCertificate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetInstanceCertificate_sdk_2eproto.base);
  return *internal_default_instance();
}


void GetInstanceCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetInstanceCertificate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetInstanceCertificate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetInstanceCertificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetInstanceCertificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
}

::google::protobuf::uint8* GetInstanceCertificate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  return target;
}

size_t GetInstanceCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInstanceCertificate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInstanceCertificate* source =
      ::google::protobuf::DynamicCastToGenerated<GetInstanceCertificate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
    MergeFrom(*source);
  }
}

void GetInstanceCertificate::MergeFrom(const GetInstanceCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetInstanceCertificate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceCertificate::CopyFrom(const GetInstanceCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceCertificate::IsInitialized() const {
  return true;
}

void GetInstanceCertificate::Swap(GetInstanceCertificate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInstanceCertificate::InternalSwap(GetInstanceCertificate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetInstanceCertificate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ActivateGameSession::InitAsDefaultInstance() {
  ::com::amazon::whitewater::auxproxy::pbuffer::_ActivateGameSession_default_instance_._instance.get_mutable()->gamesession_ = const_cast< ::com::amazon::whitewater::auxproxy::pbuffer::GameSession*>(
      ::com::amazon::whitewater::auxproxy::pbuffer::GameSession::internal_default_instance());
}
class ActivateGameSession::HasBitSetters {
 public:
  static const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession& gamesession(const ActivateGameSession* msg);
};

const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession&
ActivateGameSession::HasBitSetters::gamesession(const ActivateGameSession* msg) {
  return *msg->gamesession_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivateGameSession::kGameSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivateGameSession::ActivateGameSession()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
}
ActivateGameSession::ActivateGameSession(const ActivateGameSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gamesession()) {
    gamesession_ = new ::com::amazon::whitewater::auxproxy::pbuffer::GameSession(*from.gamesession_);
  } else {
    gamesession_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
}

void ActivateGameSession::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ActivateGameSession_sdk_2eproto.base);
  gamesession_ = nullptr;
}

ActivateGameSession::~ActivateGameSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  SharedDtor();
}

void ActivateGameSession::SharedDtor() {
  if (this != internal_default_instance()) delete gamesession_;
}

void ActivateGameSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivateGameSession& ActivateGameSession::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ActivateGameSession_sdk_2eproto.base);
  return *internal_default_instance();
}


void ActivateGameSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && gamesession_ != nullptr) {
    delete gamesession_;
  }
  gamesession_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivateGameSession::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ActivateGameSession*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::amazon::whitewater::auxproxy::pbuffer::GameSession::_InternalParse;
        object = msg->mutable_gamesession();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivateGameSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamesession()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivateGameSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (this->has_gamesession()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::gamesession(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
}

::google::protobuf::uint8* ActivateGameSession::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (this->has_gamesession()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::gamesession(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  return target;
}

size_t ActivateGameSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (this->has_gamesession()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gamesession_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivateGameSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivateGameSession* source =
      ::google::protobuf::DynamicCastToGenerated<ActivateGameSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
    MergeFrom(*source);
  }
}

void ActivateGameSession::MergeFrom(const ActivateGameSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gamesession()) {
    mutable_gamesession()->::com::amazon::whitewater::auxproxy::pbuffer::GameSession::MergeFrom(from.gamesession());
  }
}

void ActivateGameSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivateGameSession::CopyFrom(const ActivateGameSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateGameSession::IsInitialized() const {
  return true;
}

void ActivateGameSession::Swap(ActivateGameSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivateGameSession::InternalSwap(ActivateGameSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gamesession_, other->gamesession_);
}

::google::protobuf::Metadata ActivateGameSession::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TerminateProcess::InitAsDefaultInstance() {
}
class TerminateProcess::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TerminateProcess::kTerminationTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TerminateProcess::TerminateProcess()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
}
TerminateProcess::TerminateProcess(const TerminateProcess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  terminationtime_ = from.terminationtime_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
}

void TerminateProcess::SharedCtor() {
  terminationtime_ = PROTOBUF_LONGLONG(0);
}

TerminateProcess::~TerminateProcess() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  SharedDtor();
}

void TerminateProcess::SharedDtor() {
}

void TerminateProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TerminateProcess& TerminateProcess::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TerminateProcess_sdk_2eproto.base);
  return *internal_default_instance();
}


void TerminateProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terminationtime_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TerminateProcess::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TerminateProcess*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 terminationTime = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_terminationtime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TerminateProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 terminationTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &terminationtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TerminateProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 terminationTime = 1;
  if (this->terminationtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->terminationtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
}

::google::protobuf::uint8* TerminateProcess::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 terminationTime = 1;
  if (this->terminationtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->terminationtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  return target;
}

size_t TerminateProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 terminationTime = 1;
  if (this->terminationtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->terminationtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TerminateProcess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  GOOGLE_DCHECK_NE(&from, this);
  const TerminateProcess* source =
      ::google::protobuf::DynamicCastToGenerated<TerminateProcess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
    MergeFrom(*source);
  }
}

void TerminateProcess::MergeFrom(const TerminateProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.terminationtime() != 0) {
    set_terminationtime(from.terminationtime());
  }
}

void TerminateProcess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerminateProcess::CopyFrom(const TerminateProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminateProcess::IsInitialized() const {
  return true;
}

void TerminateProcess::Swap(TerminateProcess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TerminateProcess::InternalSwap(TerminateProcess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(terminationtime_, other->terminationtime_);
}

::google::protobuf::Metadata TerminateProcess::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DescribePlayerSessionsResponse::InitAsDefaultInstance() {
}
class DescribePlayerSessionsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DescribePlayerSessionsResponse::kNextTokenFieldNumber;
const int DescribePlayerSessionsResponse::kPlayerSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DescribePlayerSessionsResponse::DescribePlayerSessionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
}
DescribePlayerSessionsResponse::DescribePlayerSessionsResponse(const DescribePlayerSessionsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      playersessions_(from.playersessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nexttoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nexttoken().size() > 0) {
    nexttoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexttoken_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
}

void DescribePlayerSessionsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DescribePlayerSessionsResponse_sdk_2eproto.base);
  nexttoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DescribePlayerSessionsResponse::~DescribePlayerSessionsResponse() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  SharedDtor();
}

void DescribePlayerSessionsResponse::SharedDtor() {
  nexttoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DescribePlayerSessionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribePlayerSessionsResponse& DescribePlayerSessionsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DescribePlayerSessionsResponse_sdk_2eproto.base);
  return *internal_default_instance();
}


void DescribePlayerSessionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playersessions_.Clear();
  nexttoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DescribePlayerSessionsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DescribePlayerSessionsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string nextToken = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken");
        object = msg->mutable_nexttoken();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession::_InternalParse;
          object = msg->add_playersessions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DescribePlayerSessionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string nextToken = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nexttoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nexttoken().data(), static_cast<int>(this->nexttoken().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_playersessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DescribePlayerSessionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nextToken = 1;
  if (this->nexttoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nexttoken().data(), static_cast<int>(this->nexttoken().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nexttoken(), output);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playersessions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->playersessions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
}

::google::protobuf::uint8* DescribePlayerSessionsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nextToken = 1;
  if (this->nexttoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nexttoken().data(), static_cast<int>(this->nexttoken().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nexttoken(), target);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playersessions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->playersessions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  return target;
}

size_t DescribePlayerSessionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->playersessions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->playersessions(static_cast<int>(i)));
    }
  }

  // string nextToken = 1;
  if (this->nexttoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nexttoken());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribePlayerSessionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribePlayerSessionsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DescribePlayerSessionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
    MergeFrom(*source);
  }
}

void DescribePlayerSessionsResponse::MergeFrom(const DescribePlayerSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playersessions_.MergeFrom(from.playersessions_);
  if (from.nexttoken().size() > 0) {

    nexttoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexttoken_);
  }
}

void DescribePlayerSessionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribePlayerSessionsResponse::CopyFrom(const DescribePlayerSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribePlayerSessionsResponse::IsInitialized() const {
  return true;
}

void DescribePlayerSessionsResponse::Swap(DescribePlayerSessionsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DescribePlayerSessionsResponse::InternalSwap(DescribePlayerSessionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&playersessions_)->InternalSwap(CastToBase(&other->playersessions_));
  nexttoken_.Swap(&other->nexttoken_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DescribePlayerSessionsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateGameSession::InitAsDefaultInstance() {
  ::com::amazon::whitewater::auxproxy::pbuffer::_UpdateGameSession_default_instance_._instance.get_mutable()->gamesession_ = const_cast< ::com::amazon::whitewater::auxproxy::pbuffer::GameSession*>(
      ::com::amazon::whitewater::auxproxy::pbuffer::GameSession::internal_default_instance());
}
class UpdateGameSession::HasBitSetters {
 public:
  static const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession& gamesession(const UpdateGameSession* msg);
};

const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession&
UpdateGameSession::HasBitSetters::gamesession(const UpdateGameSession* msg) {
  return *msg->gamesession_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateGameSession::kGameSessionFieldNumber;
const int UpdateGameSession::kUpdateReasonFieldNumber;
const int UpdateGameSession::kBackfillTicketIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateGameSession::UpdateGameSession()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
}
UpdateGameSession::UpdateGameSession(const UpdateGameSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  updatereason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.updatereason().size() > 0) {
    updatereason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updatereason_);
  }
  backfillticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.backfillticketid().size() > 0) {
    backfillticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backfillticketid_);
  }
  if (from.has_gamesession()) {
    gamesession_ = new ::com::amazon::whitewater::auxproxy::pbuffer::GameSession(*from.gamesession_);
  } else {
    gamesession_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
}

void UpdateGameSession::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateGameSession_sdk_2eproto.base);
  updatereason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backfillticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesession_ = nullptr;
}

UpdateGameSession::~UpdateGameSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  SharedDtor();
}

void UpdateGameSession::SharedDtor() {
  updatereason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backfillticketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gamesession_;
}

void UpdateGameSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateGameSession& UpdateGameSession::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateGameSession_sdk_2eproto.base);
  return *internal_default_instance();
}


void UpdateGameSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updatereason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backfillticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && gamesession_ != nullptr) {
    delete gamesession_;
  }
  gamesession_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateGameSession::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateGameSession*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::amazon::whitewater::auxproxy::pbuffer::GameSession::_InternalParse;
        object = msg->mutable_gamesession();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string updateReason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason");
        object = msg->mutable_updatereason();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string backfillTicketId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId");
        object = msg->mutable_backfillticketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateGameSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamesession()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string updateReason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatereason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->updatereason().data(), static_cast<int>(this->updatereason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string backfillTicketId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backfillticketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->backfillticketid().data(), static_cast<int>(this->backfillticketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateGameSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (this->has_gamesession()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::gamesession(this), output);
  }

  // string updateReason = 2;
  if (this->updatereason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->updatereason().data(), static_cast<int>(this->updatereason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->updatereason(), output);
  }

  // string backfillTicketId = 3;
  if (this->backfillticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->backfillticketid().data(), static_cast<int>(this->backfillticketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backfillticketid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
}

::google::protobuf::uint8* UpdateGameSession::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (this->has_gamesession()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::gamesession(this), target);
  }

  // string updateReason = 2;
  if (this->updatereason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->updatereason().data(), static_cast<int>(this->updatereason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->updatereason(), target);
  }

  // string backfillTicketId = 3;
  if (this->backfillticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->backfillticketid().data(), static_cast<int>(this->backfillticketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->backfillticketid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  return target;
}

size_t UpdateGameSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string updateReason = 2;
  if (this->updatereason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->updatereason());
  }

  // string backfillTicketId = 3;
  if (this->backfillticketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->backfillticketid());
  }

  // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (this->has_gamesession()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gamesession_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateGameSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateGameSession* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateGameSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
    MergeFrom(*source);
  }
}

void UpdateGameSession::MergeFrom(const UpdateGameSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.updatereason().size() > 0) {

    updatereason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updatereason_);
  }
  if (from.backfillticketid().size() > 0) {

    backfillticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backfillticketid_);
  }
  if (from.has_gamesession()) {
    mutable_gamesession()->::com::amazon::whitewater::auxproxy::pbuffer::GameSession::MergeFrom(from.gamesession());
  }
}

void UpdateGameSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGameSession::CopyFrom(const UpdateGameSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGameSession::IsInitialized() const {
  return true;
}

void UpdateGameSession::Swap(UpdateGameSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGameSession::InternalSwap(UpdateGameSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  updatereason_.Swap(&other->updatereason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  backfillticketid_.Swap(&other->backfillticketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gamesession_, other->gamesession_);
}

::google::protobuf::Metadata UpdateGameSession::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetInstanceCertificateResponse::InitAsDefaultInstance() {
}
class GetInstanceCertificateResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInstanceCertificateResponse::kCertificatePathFieldNumber;
const int GetInstanceCertificateResponse::kCertificateChainPathFieldNumber;
const int GetInstanceCertificateResponse::kPrivateKeyPathFieldNumber;
const int GetInstanceCertificateResponse::kHostNameFieldNumber;
const int GetInstanceCertificateResponse::kRootCertificatePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInstanceCertificateResponse::GetInstanceCertificateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
}
GetInstanceCertificateResponse::GetInstanceCertificateResponse(const GetInstanceCertificateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  certificatepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.certificatepath().size() > 0) {
    certificatepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certificatepath_);
  }
  certificatechainpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.certificatechainpath().size() > 0) {
    certificatechainpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certificatechainpath_);
  }
  privatekeypath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.privatekeypath().size() > 0) {
    privatekeypath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.privatekeypath_);
  }
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hostname().size() > 0) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  rootcertificatepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rootcertificatepath().size() > 0) {
    rootcertificatepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rootcertificatepath_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
}

void GetInstanceCertificateResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetInstanceCertificateResponse_sdk_2eproto.base);
  certificatepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificatechainpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privatekeypath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rootcertificatepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetInstanceCertificateResponse::~GetInstanceCertificateResponse() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  SharedDtor();
}

void GetInstanceCertificateResponse::SharedDtor() {
  certificatepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificatechainpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privatekeypath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rootcertificatepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetInstanceCertificateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInstanceCertificateResponse& GetInstanceCertificateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetInstanceCertificateResponse_sdk_2eproto.base);
  return *internal_default_instance();
}


void GetInstanceCertificateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  certificatepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificatechainpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privatekeypath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rootcertificatepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetInstanceCertificateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetInstanceCertificateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string certificatePath = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath");
        object = msg->mutable_certificatepath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string certificateChainPath = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath");
        object = msg->mutable_certificatechainpath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string privateKeyPath = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath");
        object = msg->mutable_privatekeypath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string hostName = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName");
        object = msg->mutable_hostname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string rootCertificatePath = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath");
        object = msg->mutable_rootcertificatepath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetInstanceCertificateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string certificatePath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certificatepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->certificatepath().data(), static_cast<int>(this->certificatepath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string certificateChainPath = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certificatechainpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->certificatechainpath().data(), static_cast<int>(this->certificatechainpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string privateKeyPath = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_privatekeypath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->privatekeypath().data(), static_cast<int>(this->privatekeypath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hostName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rootCertificatePath = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rootcertificatepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rootcertificatepath().data(), static_cast<int>(this->rootcertificatepath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetInstanceCertificateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string certificatePath = 1;
  if (this->certificatepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certificatepath().data(), static_cast<int>(this->certificatepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->certificatepath(), output);
  }

  // string certificateChainPath = 2;
  if (this->certificatechainpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certificatechainpath().data(), static_cast<int>(this->certificatechainpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->certificatechainpath(), output);
  }

  // string privateKeyPath = 3;
  if (this->privatekeypath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->privatekeypath().data(), static_cast<int>(this->privatekeypath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->privatekeypath(), output);
  }

  // string hostName = 4;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hostname(), output);
  }

  // string rootCertificatePath = 5;
  if (this->rootcertificatepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rootcertificatepath().data(), static_cast<int>(this->rootcertificatepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->rootcertificatepath(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
}

::google::protobuf::uint8* GetInstanceCertificateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string certificatePath = 1;
  if (this->certificatepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certificatepath().data(), static_cast<int>(this->certificatepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->certificatepath(), target);
  }

  // string certificateChainPath = 2;
  if (this->certificatechainpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certificatechainpath().data(), static_cast<int>(this->certificatechainpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->certificatechainpath(), target);
  }

  // string privateKeyPath = 3;
  if (this->privatekeypath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->privatekeypath().data(), static_cast<int>(this->privatekeypath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->privatekeypath(), target);
  }

  // string hostName = 4;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostname(), target);
  }

  // string rootCertificatePath = 5;
  if (this->rootcertificatepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rootcertificatepath().data(), static_cast<int>(this->rootcertificatepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rootcertificatepath(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  return target;
}

size_t GetInstanceCertificateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string certificatePath = 1;
  if (this->certificatepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->certificatepath());
  }

  // string certificateChainPath = 2;
  if (this->certificatechainpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->certificatechainpath());
  }

  // string privateKeyPath = 3;
  if (this->privatekeypath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->privatekeypath());
  }

  // string hostName = 4;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // string rootCertificatePath = 5;
  if (this->rootcertificatepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rootcertificatepath());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInstanceCertificateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInstanceCertificateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetInstanceCertificateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
    MergeFrom(*source);
  }
}

void GetInstanceCertificateResponse::MergeFrom(const GetInstanceCertificateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.certificatepath().size() > 0) {

    certificatepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certificatepath_);
  }
  if (from.certificatechainpath().size() > 0) {

    certificatechainpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certificatechainpath_);
  }
  if (from.privatekeypath().size() > 0) {

    privatekeypath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.privatekeypath_);
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.rootcertificatepath().size() > 0) {

    rootcertificatepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rootcertificatepath_);
  }
}

void GetInstanceCertificateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceCertificateResponse::CopyFrom(const GetInstanceCertificateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceCertificateResponse::IsInitialized() const {
  return true;
}

void GetInstanceCertificateResponse::Swap(GetInstanceCertificateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInstanceCertificateResponse::InternalSwap(GetInstanceCertificateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  certificatepath_.Swap(&other->certificatepath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  certificatechainpath_.Swap(&other->certificatechainpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  privatekeypath_.Swap(&other->privatekeypath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rootcertificatepath_.Swap(&other->rootcertificatepath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetInstanceCertificateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BackfillMatchmakingResponse::InitAsDefaultInstance() {
}
class BackfillMatchmakingResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackfillMatchmakingResponse::kTicketIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackfillMatchmakingResponse::BackfillMatchmakingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
}
BackfillMatchmakingResponse::BackfillMatchmakingResponse(const BackfillMatchmakingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticketid().size() > 0) {
    ticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticketid_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
}

void BackfillMatchmakingResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BackfillMatchmakingResponse_sdk_2eproto.base);
  ticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BackfillMatchmakingResponse::~BackfillMatchmakingResponse() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  SharedDtor();
}

void BackfillMatchmakingResponse::SharedDtor() {
  ticketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BackfillMatchmakingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackfillMatchmakingResponse& BackfillMatchmakingResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BackfillMatchmakingResponse_sdk_2eproto.base);
  return *internal_default_instance();
}


void BackfillMatchmakingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BackfillMatchmakingResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BackfillMatchmakingResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ticketId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId");
        object = msg->mutable_ticketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BackfillMatchmakingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ticketId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticketid().data(), static_cast<int>(this->ticketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BackfillMatchmakingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticketid().data(), static_cast<int>(this->ticketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ticketid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
}

::google::protobuf::uint8* BackfillMatchmakingResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticketid().data(), static_cast<int>(this->ticketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ticketid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  return target;
}

size_t BackfillMatchmakingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticketid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackfillMatchmakingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BackfillMatchmakingResponse* source =
      ::google::protobuf::DynamicCastToGenerated<BackfillMatchmakingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
    MergeFrom(*source);
  }
}

void BackfillMatchmakingResponse::MergeFrom(const BackfillMatchmakingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticketid().size() > 0) {

    ticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticketid_);
  }
}

void BackfillMatchmakingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackfillMatchmakingResponse::CopyFrom(const BackfillMatchmakingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackfillMatchmakingResponse::IsInitialized() const {
  return true;
}

void BackfillMatchmakingResponse::Swap(BackfillMatchmakingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackfillMatchmakingResponse::InternalSwap(BackfillMatchmakingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ticketid_.Swap(&other->ticketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BackfillMatchmakingResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Response::InitAsDefaultInstance() {
}
class Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kStatusFieldNumber;
const int Response::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errormessage().size() > 0) {
    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Response_sdk_2eproto.base);
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  errormessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Response_sdk_2eproto.base);
  return *internal_default_instance();
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::com::amazon::whitewater::auxproxy::pbuffer::Response_Status>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string errorMessage = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage");
        object = msg->mutable_errormessage();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::com::amazon::whitewater::auxproxy::pbuffer::Response_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errorMessage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errormessage().data(), static_cast<int>(this->errormessage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errormessage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormessage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errormessage());
  }

  // .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errormessage().size() > 0) {

    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errormessage_.Swap(&other->errormessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameLiftResponse::InitAsDefaultInstance() {
}
class GameLiftResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLiftResponse::kStatusFieldNumber;
const int GameLiftResponse::kResponseDataFieldNumber;
const int GameLiftResponse::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLiftResponse::GameLiftResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
}
GameLiftResponse::GameLiftResponse(const GameLiftResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  responsedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.responsedata().size() > 0) {
    responsedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.responsedata_);
  }
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errormessage().size() > 0) {
    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
}

void GameLiftResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameLiftResponse_sdk_2eproto.base);
  responsedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

GameLiftResponse::~GameLiftResponse() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  SharedDtor();
}

void GameLiftResponse::SharedDtor() {
  responsedata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errormessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameLiftResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLiftResponse& GameLiftResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameLiftResponse_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameLiftResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responsedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameLiftResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameLiftResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.Status status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse_Status>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string responseData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData");
        object = msg->mutable_responsedata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string errorMessage = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage");
        object = msg->mutable_errormessage();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameLiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string responseData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_responsedata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->responsedata().data(), static_cast<int>(this->responsedata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errorMessage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errormessage().data(), static_cast<int>(this->errormessage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameLiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // string responseData = 2;
  if (this->responsedata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->responsedata().data(), static_cast<int>(this->responsedata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->responsedata(), output);
  }

  // string errorMessage = 3;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errormessage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
}

::google::protobuf::uint8* GameLiftResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // string responseData = 2;
  if (this->responsedata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->responsedata().data(), static_cast<int>(this->responsedata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->responsedata(), target);
  }

  // string errorMessage = 3;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errormessage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  return target;
}

size_t GameLiftResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string responseData = 2;
  if (this->responsedata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->responsedata());
  }

  // string errorMessage = 3;
  if (this->errormessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errormessage());
  }

  // .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLiftResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLiftResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GameLiftResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
    MergeFrom(*source);
  }
}

void GameLiftResponse::MergeFrom(const GameLiftResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.responsedata().size() > 0) {

    responsedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.responsedata_);
  }
  if (from.errormessage().size() > 0) {

    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void GameLiftResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLiftResponse::CopyFrom(const GameLiftResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLiftResponse::IsInitialized() const {
  return true;
}

void GameLiftResponse::Swap(GameLiftResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLiftResponse::InternalSwap(GameLiftResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  responsedata_.Swap(&other->responsedata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errormessage_.Swap(&other->errormessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::google::protobuf::Metadata GameLiftResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameSession::InitAsDefaultInstance() {
}
class GameSession::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSession::kGameSessionIdFieldNumber;
const int GameSession::kFleetIdFieldNumber;
const int GameSession::kNameFieldNumber;
const int GameSession::kMaxPlayersFieldNumber;
const int GameSession::kJoinableFieldNumber;
const int GameSession::kGamePropertiesFieldNumber;
const int GameSession::kIpAddressFieldNumber;
const int GameSession::kPortFieldNumber;
const int GameSession::kGameSessionDataFieldNumber;
const int GameSession::kMatchmakerDataFieldNumber;
const int GameSession::kDnsNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSession::GameSession()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
}
GameSession::GameSession(const GameSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      gameproperties_(from.gameproperties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  fleetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fleetid().size() > 0) {
    fleetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipaddress().size() > 0) {
    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  gamesessiondata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessiondata().size() > 0) {
    gamesessiondata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessiondata_);
  }
  matchmakerdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.matchmakerdata().size() > 0) {
    matchmakerdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matchmakerdata_);
  }
  dnsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dnsname().size() > 0) {
    dnsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dnsname_);
  }
  ::memcpy(&maxplayers_, &from.maxplayers_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&maxplayers_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
}

void GameSession::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameSession_sdk_2eproto.base);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessiondata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakerdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dnsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxplayers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&maxplayers_)) + sizeof(port_));
}

GameSession::~GameSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  SharedDtor();
}

void GameSession::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessiondata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakerdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dnsname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSession& GameSession::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameSession_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameproperties_.Clear();
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessiondata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakerdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dnsname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxplayers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&maxplayers_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameSession::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameSession*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId");
        object = msg->mutable_gamesessionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string fleetId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId");
        object = msg->mutable_fleetid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GameSession.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 maxPlayers = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_maxplayers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool joinable = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_joinable(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty::_InternalParse;
          object = msg->add_gameproperties();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // string ipAddress = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress");
        object = msg->mutable_ipaddress();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 port = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string gameSessionData = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData");
        object = msg->mutable_gamesessiondata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string matchmakerData = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData");
        object = msg->mutable_matchmakerdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string dnsName = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName");
        object = msg->mutable_dnsname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fleetId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fleetid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fleetid().data(), static_cast<int>(this->fleetid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxPlayers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool joinable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &joinable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gameproperties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ipAddress = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddress().data(), static_cast<int>(this->ipaddress().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gameSessionData = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessiondata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessiondata().data(), static_cast<int>(this->gamesessiondata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string matchmakerData = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchmakerdata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matchmakerdata().data(), static_cast<int>(this->matchmakerdata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dnsName = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dnsname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dnsname().data(), static_cast<int>(this->dnsname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // string fleetId = 2;
  if (this->fleetid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fleetid().data(), static_cast<int>(this->fleetid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fleetid(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // int32 maxPlayers = 4;
  if (this->maxplayers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxplayers(), output);
  }

  // bool joinable = 5;
  if (this->joinable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->joinable(), output);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gameproperties_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->gameproperties(static_cast<int>(i)),
      output);
  }

  // string ipAddress = 7;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), static_cast<int>(this->ipaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ipaddress(), output);
  }

  // int32 port = 8;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->port(), output);
  }

  // string gameSessionData = 9;
  if (this->gamesessiondata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessiondata().data(), static_cast<int>(this->gamesessiondata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->gamesessiondata(), output);
  }

  // string matchmakerData = 10;
  if (this->matchmakerdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matchmakerdata().data(), static_cast<int>(this->matchmakerdata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->matchmakerdata(), output);
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dnsname().data(), static_cast<int>(this->dnsname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->dnsname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
}

::google::protobuf::uint8* GameSession::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // string fleetId = 2;
  if (this->fleetid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fleetid().data(), static_cast<int>(this->fleetid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fleetid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // int32 maxPlayers = 4;
  if (this->maxplayers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxplayers(), target);
  }

  // bool joinable = 5;
  if (this->joinable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->joinable(), target);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gameproperties_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->gameproperties(static_cast<int>(i)), target);
  }

  // string ipAddress = 7;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), static_cast<int>(this->ipaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ipaddress(), target);
  }

  // int32 port = 8;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->port(), target);
  }

  // string gameSessionData = 9;
  if (this->gamesessiondata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessiondata().data(), static_cast<int>(this->gamesessiondata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->gamesessiondata(), target);
  }

  // string matchmakerData = 10;
  if (this->matchmakerdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matchmakerdata().data(), static_cast<int>(this->matchmakerdata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->matchmakerdata(), target);
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dnsname().data(), static_cast<int>(this->dnsname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->dnsname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  return target;
}

size_t GameSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->gameproperties_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gameproperties(static_cast<int>(i)));
    }
  }

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  // string fleetId = 2;
  if (this->fleetid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fleetid());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string ipAddress = 7;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddress());
  }

  // string gameSessionData = 9;
  if (this->gamesessiondata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessiondata());
  }

  // string matchmakerData = 10;
  if (this->matchmakerdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matchmakerdata());
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dnsname());
  }

  // int32 maxPlayers = 4;
  if (this->maxplayers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxplayers());
  }

  // bool joinable = 5;
  if (this->joinable() != 0) {
    total_size += 1 + 1;
  }

  // int32 port = 8;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSession* source =
      ::google::protobuf::DynamicCastToGenerated<GameSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
    MergeFrom(*source);
  }
}

void GameSession::MergeFrom(const GameSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameproperties_.MergeFrom(from.gameproperties_);
  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  if (from.fleetid().size() > 0) {

    fleetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  if (from.gamesessiondata().size() > 0) {

    gamesessiondata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessiondata_);
  }
  if (from.matchmakerdata().size() > 0) {

    matchmakerdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matchmakerdata_);
  }
  if (from.dnsname().size() > 0) {

    dnsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dnsname_);
  }
  if (from.maxplayers() != 0) {
    set_maxplayers(from.maxplayers());
  }
  if (from.joinable() != 0) {
    set_joinable(from.joinable());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void GameSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSession::CopyFrom(const GameSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSession::IsInitialized() const {
  return true;
}

void GameSession::Swap(GameSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSession::InternalSwap(GameSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&gameproperties_)->InternalSwap(CastToBase(&other->gameproperties_));
  gamesessionid_.Swap(&other->gamesessionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fleetid_.Swap(&other->fleetid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipaddress_.Swap(&other->ipaddress_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gamesessiondata_.Swap(&other->gamesessiondata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  matchmakerdata_.Swap(&other->matchmakerdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dnsname_.Swap(&other->dnsname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maxplayers_, other->maxplayers_);
  swap(joinable_, other->joinable_);
  swap(port_, other->port_);
}

::google::protobuf::Metadata GameSession::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GameProperty::InitAsDefaultInstance() {
}
class GameProperty::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameProperty::kKeyFieldNumber;
const int GameProperty::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameProperty::GameProperty()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
}
GameProperty::GameProperty(const GameProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
}

void GameProperty::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameProperty_sdk_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameProperty::~GameProperty() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  SharedDtor();
}

void GameProperty::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameProperty& GameProperty::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameProperty_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameProperty::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameProperty*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
}

::google::protobuf::uint8* GameProperty::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  return target;
}

size_t GameProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const GameProperty* source =
      ::google::protobuf::DynamicCastToGenerated<GameProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
    MergeFrom(*source);
  }
}

void GameProperty::MergeFrom(const GameProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void GameProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameProperty::CopyFrom(const GameProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameProperty::IsInitialized() const {
  return true;
}

void GameProperty::Swap(GameProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameProperty::InternalSwap(GameProperty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GameProperty::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerSession::InitAsDefaultInstance() {
}
class PlayerSession::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerSession::kPlayerSessionIdFieldNumber;
const int PlayerSession::kPlayerIdFieldNumber;
const int PlayerSession::kGameSessionIdFieldNumber;
const int PlayerSession::kFleetIdFieldNumber;
const int PlayerSession::kIpAddressFieldNumber;
const int PlayerSession::kStatusFieldNumber;
const int PlayerSession::kCreationTimeFieldNumber;
const int PlayerSession::kTerminationTimeFieldNumber;
const int PlayerSession::kPortFieldNumber;
const int PlayerSession::kPlayerDataFieldNumber;
const int PlayerSession::kDnsNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerSession::PlayerSession()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
}
PlayerSession::PlayerSession(const PlayerSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playersessionid().size() > 0) {
    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playerid().size() > 0) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  fleetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fleetid().size() > 0) {
    fleetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
  }
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipaddress().size() > 0) {
    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  playerdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playerdata().size() > 0) {
    playerdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerdata_);
  }
  dnsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dnsname().size() > 0) {
    dnsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dnsname_);
  }
  ::memcpy(&creationtime_, &from.creationtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&creationtime_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
}

void PlayerSession::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerSession_sdk_2eproto.base);
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dnsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creationtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&creationtime_)) + sizeof(port_));
}

PlayerSession::~PlayerSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  SharedDtor();
}

void PlayerSession::SharedDtor() {
  playersessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dnsname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerSession& PlayerSession::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerSession_sdk_2eproto.base);
  return *internal_default_instance();
}


void PlayerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dnsname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creationtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&creationtime_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerSession::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerSession*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string playerSessionId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId");
        object = msg->mutable_playersessionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId");
        object = msg->mutable_playerid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string gameSessionId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId");
        object = msg->mutable_gamesessionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string fleetId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId");
        object = msg->mutable_fleetid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ipAddress = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress");
        object = msg->mutable_ipaddress();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string status = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status");
        object = msg->mutable_status();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 creationTime = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_creationtime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 terminationTime = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_terminationtime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 port = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string playerData = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData");
        object = msg->mutable_playerdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string dnsName = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName");
        object = msg->mutable_dnsname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string playerSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playersessionid().data(), static_cast<int>(this->playersessionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gameSessionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fleetId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fleetid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fleetid().data(), static_cast<int>(this->fleetid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ipAddress = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddress().data(), static_cast<int>(this->ipaddress().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 creationTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creationtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 terminationTime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &terminationtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerData = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerdata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playerdata().data(), static_cast<int>(this->playerdata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dnsName = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dnsname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dnsname().data(), static_cast<int>(this->dnsname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerSessionId = 1;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), static_cast<int>(this->playersessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playersessionid(), output);
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playerid(), output);
  }

  // string gameSessionId = 3;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gamesessionid(), output);
  }

  // string fleetId = 4;
  if (this->fleetid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fleetid().data(), static_cast<int>(this->fleetid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fleetid(), output);
  }

  // string ipAddress = 5;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), static_cast<int>(this->ipaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ipaddress(), output);
  }

  // string status = 6;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->status(), output);
  }

  // int64 creationTime = 7;
  if (this->creationtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->creationtime(), output);
  }

  // int64 terminationTime = 8;
  if (this->terminationtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->terminationtime(), output);
  }

  // int32 port = 9;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->port(), output);
  }

  // string playerData = 10;
  if (this->playerdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerdata().data(), static_cast<int>(this->playerdata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->playerdata(), output);
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dnsname().data(), static_cast<int>(this->dnsname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->dnsname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
}

::google::protobuf::uint8* PlayerSession::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerSessionId = 1;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), static_cast<int>(this->playersessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playersessionid(), target);
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playerid(), target);
  }

  // string gameSessionId = 3;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), static_cast<int>(this->gamesessionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gamesessionid(), target);
  }

  // string fleetId = 4;
  if (this->fleetid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fleetid().data(), static_cast<int>(this->fleetid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fleetid(), target);
  }

  // string ipAddress = 5;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), static_cast<int>(this->ipaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ipaddress(), target);
  }

  // string status = 6;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->status(), target);
  }

  // int64 creationTime = 7;
  if (this->creationtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->creationtime(), target);
  }

  // int64 terminationTime = 8;
  if (this->terminationtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->terminationtime(), target);
  }

  // int32 port = 9;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->port(), target);
  }

  // string playerData = 10;
  if (this->playerdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerdata().data(), static_cast<int>(this->playerdata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->playerdata(), target);
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dnsname().data(), static_cast<int>(this->dnsname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->dnsname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  return target;
}

size_t PlayerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerSessionId = 1;
  if (this->playersessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playersessionid());
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerid());
  }

  // string gameSessionId = 3;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  // string fleetId = 4;
  if (this->fleetid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fleetid());
  }

  // string ipAddress = 5;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddress());
  }

  // string status = 6;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // string playerData = 10;
  if (this->playerdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerdata());
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dnsname());
  }

  // int64 creationTime = 7;
  if (this->creationtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->creationtime());
  }

  // int64 terminationTime = 8;
  if (this->terminationtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->terminationtime());
  }

  // int32 port = 9;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerSession* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
    MergeFrom(*source);
  }
}

void PlayerSession::MergeFrom(const PlayerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playersessionid().size() > 0) {

    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  if (from.playerid().size() > 0) {

    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  if (from.fleetid().size() > 0) {

    fleetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
  }
  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.playerdata().size() > 0) {

    playerdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerdata_);
  }
  if (from.dnsname().size() > 0) {

    dnsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dnsname_);
  }
  if (from.creationtime() != 0) {
    set_creationtime(from.creationtime());
  }
  if (from.terminationtime() != 0) {
    set_terminationtime(from.terminationtime());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void PlayerSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSession::CopyFrom(const PlayerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSession::IsInitialized() const {
  return true;
}

void PlayerSession::Swap(PlayerSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerSession::InternalSwap(PlayerSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  playersessionid_.Swap(&other->playersessionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playerid_.Swap(&other->playerid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gamesessionid_.Swap(&other->gamesessionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fleetid_.Swap(&other->fleetid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipaddress_.Swap(&other->ipaddress_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playerdata_.Swap(&other->playerdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dnsname_.Swap(&other->dnsname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(creationtime_, other->creationtime_);
  swap(terminationtime_, other->terminationtime_);
  swap(port_, other->port_);
}

::google::protobuf::Metadata PlayerSession::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

Player_PlayerAttributesEntry_DoNotUse::Player_PlayerAttributesEntry_DoNotUse() {}
Player_PlayerAttributesEntry_DoNotUse::Player_PlayerAttributesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Player_PlayerAttributesEntry_DoNotUse::MergeFrom(const Player_PlayerAttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Player_PlayerAttributesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[23];
}
void Player_PlayerAttributesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Player_PlayerAttributesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Player_PlayerAttributesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "com.amazon.whitewater.auxproxy.pbuffer.Player.PlayerAttributesEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

Player_LatencyInMsEntry_DoNotUse::Player_LatencyInMsEntry_DoNotUse() {}
Player_LatencyInMsEntry_DoNotUse::Player_LatencyInMsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Player_LatencyInMsEntry_DoNotUse::MergeFrom(const Player_LatencyInMsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Player_LatencyInMsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[24];
}
void Player_LatencyInMsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Player_LatencyInMsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Player_LatencyInMsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "com.amazon.whitewater.auxproxy.pbuffer.Player.LatencyInMsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Player::InitAsDefaultInstance() {
}
class Player::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Player::kPlayerIdFieldNumber;
const int Player::kPlayerAttributesFieldNumber;
const int Player::kTeamFieldNumber;
const int Player::kLatencyInMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Player::Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.Player)
}
Player::Player(const Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerattributes_.MergeFrom(from.playerattributes_);
  latencyinms_.MergeFrom(from.latencyinms_);
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playerid().size() > 0) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  team_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.team().size() > 0) {
    team_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.Player)
}

void Player::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Player_sdk_2eproto.base);
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.Player)
  SharedDtor();
}

void Player::SharedDtor() {
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Player& Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Player_sdk_2eproto.base);
  return *internal_default_instance();
}


void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerattributes_.Clear();
  latencyinms_.Clear();
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string playerId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.Player.playerId");
        object = msg->mutable_playerid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->playerattributes_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // string team = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.Player.team");
        object = msg->mutable_team();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, int32> latencyInMs = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->latencyinms_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string playerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.Player.playerId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          Player_PlayerAttributesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Player_PlayerAttributesEntry_DoNotUse,
              ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue > > parser(&playerattributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.Player.PlayerAttributesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string team = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team().data(), static_cast<int>(this->team().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.Player.team"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int32> latencyInMs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          Player_LatencyInMsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Player_LatencyInMsEntry_DoNotUse,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&latencyinms_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.Player.LatencyInMsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerId = 1;
  if (this->playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Player.playerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playerid(), output);
  }

  // map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
  if (!this->playerattributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.Player.PlayerAttributesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->playerattributes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->playerattributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_iterator
          it = this->playerattributes().begin();
          it != this->playerattributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Player_PlayerAttributesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(playerattributes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Player_PlayerAttributesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_iterator
          it = this->playerattributes().begin();
          it != this->playerattributes().end(); ++it) {
        entry.reset(playerattributes_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string team = 3;
  if (this->team().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team().data(), static_cast<int>(this->team().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Player.team");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team(), output);
  }

  // map<string, int32> latencyInMs = 4;
  if (!this->latencyinms().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.Player.LatencyInMsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->latencyinms().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->latencyinms().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->latencyinms().begin();
          it != this->latencyinms().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Player_LatencyInMsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(latencyinms_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Player_LatencyInMsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->latencyinms().begin();
          it != this->latencyinms().end(); ++it) {
        entry.reset(latencyinms_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.Player)
}

::google::protobuf::uint8* Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerId = 1;
  if (this->playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Player.playerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }

  // map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
  if (!this->playerattributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.Player.PlayerAttributesEntry.key");
      }
    };

    if (false &&
        this->playerattributes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->playerattributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_iterator
          it = this->playerattributes().begin();
          it != this->playerattributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Player_PlayerAttributesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(playerattributes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Player_PlayerAttributesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_iterator
          it = this->playerattributes().begin();
          it != this->playerattributes().end(); ++it) {
        entry.reset(playerattributes_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string team = 3;
  if (this->team().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team().data(), static_cast<int>(this->team().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Player.team");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team(), target);
  }

  // map<string, int32> latencyInMs = 4;
  if (!this->latencyinms().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.Player.LatencyInMsEntry.key");
      }
    };

    if (false &&
        this->latencyinms().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->latencyinms().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->latencyinms().begin();
          it != this->latencyinms().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Player_LatencyInMsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(latencyinms_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Player_LatencyInMsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->latencyinms().begin();
          it != this->latencyinms().end(); ++it) {
        entry.reset(latencyinms_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->playerattributes_size());
  {
    ::std::unique_ptr<Player_PlayerAttributesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_iterator
        it = this->playerattributes().begin();
        it != this->playerattributes().end(); ++it) {
      entry.reset(playerattributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, int32> latencyInMs = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->latencyinms_size());
  {
    ::std::unique_ptr<Player_LatencyInMsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->latencyinms().begin();
        it != this->latencyinms().end(); ++it) {
      entry.reset(latencyinms_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string playerId = 1;
  if (this->playerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerid());
  }

  // string team = 3;
  if (this->team().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::google::protobuf::DynamicCastToGenerated<Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerattributes_.MergeFrom(from.playerattributes_);
  latencyinms_.MergeFrom(from.latencyinms_);
  if (from.playerid().size() > 0) {

    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  if (from.team().size() > 0) {

    team_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_);
  }
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::Swap(Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Player::InternalSwap(Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  playerattributes_.Swap(&other->playerattributes_);
  latencyinms_.Swap(&other->latencyinms_);
  playerid_.Swap(&other->playerid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_.Swap(&other->team_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// ===================================================================

AttributeValue_SDMEntry_DoNotUse::AttributeValue_SDMEntry_DoNotUse() {}
AttributeValue_SDMEntry_DoNotUse::AttributeValue_SDMEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void AttributeValue_SDMEntry_DoNotUse::MergeFrom(const AttributeValue_SDMEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata AttributeValue_SDMEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[26];
}
void AttributeValue_SDMEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AttributeValue_SDMEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      AttributeValue_SDMEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SDMEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void AttributeValue::InitAsDefaultInstance() {
}
class AttributeValue::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttributeValue::kTypeFieldNumber;
const int AttributeValue::kSFieldNumber;
const int AttributeValue::kNFieldNumber;
const int AttributeValue::kSLFieldNumber;
const int AttributeValue::kSDMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttributeValue::AttributeValue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
}
AttributeValue::AttributeValue(const AttributeValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      sl_(from.sl_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sdm_.MergeFrom(from.sdm_);
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.s().size() > 0) {
    s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
  ::memcpy(&n_, &from.n_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&n_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
}

void AttributeValue::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AttributeValue_sdk_2eproto.base);
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&n_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&n_)) + sizeof(type_));
}

AttributeValue::~AttributeValue() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  SharedDtor();
}

void AttributeValue::SharedDtor() {
  s_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AttributeValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttributeValue& AttributeValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AttributeValue_sdk_2eproto.base);
  return *internal_default_instance();
}


void AttributeValue::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sl_.Clear();
  sdm_.Clear();
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&n_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&n_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AttributeValue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AttributeValue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string S = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S");
        object = msg->mutable_s();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double N = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_n(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated string SL = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL");
          object = msg->add_sl();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // map<string, double> SDM = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->sdm_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AttributeValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string S = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->s().data(), static_cast<int>(this->s().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double N = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string SL = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sl(this->sl_size() - 1).data(),
            static_cast<int>(this->sl(this->sl_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> SDM = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          AttributeValue_SDMEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              AttributeValue_SDMEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&sdm_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SDMEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AttributeValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // string S = 2;
  if (this->s().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->s().data(), static_cast<int>(this->s().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->s(), output);
  }

  // double N = 3;
  if (this->n() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->n(), output);
  }

  // repeated string SL = 4;
  for (int i = 0, n = this->sl_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sl(i).data(), static_cast<int>(this->sl(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sl(i), output);
  }

  // map<string, double> SDM = 5;
  if (!this->sdm().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SDMEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->sdm().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->sdm().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->sdm().begin();
          it != this->sdm().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<AttributeValue_SDMEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sdm_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<AttributeValue_SDMEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->sdm().begin();
          it != this->sdm().end(); ++it) {
        entry.reset(sdm_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
}

::google::protobuf::uint8* AttributeValue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // string S = 2;
  if (this->s().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->s().data(), static_cast<int>(this->s().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->s(), target);
  }

  // double N = 3;
  if (this->n() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->n(), target);
  }

  // repeated string SL = 4;
  for (int i = 0, n = this->sl_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sl(i).data(), static_cast<int>(this->sl(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->sl(i), target);
  }

  // map<string, double> SDM = 5;
  if (!this->sdm().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SDMEntry.key");
      }
    };

    if (false &&
        this->sdm().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->sdm().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->sdm().begin();
          it != this->sdm().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<AttributeValue_SDMEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sdm_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<AttributeValue_SDMEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->sdm().begin();
          it != this->sdm().end(); ++it) {
        entry.reset(sdm_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  return target;
}

size_t AttributeValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string SL = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sl_size());
  for (int i = 0, n = this->sl_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sl(i));
  }

  // map<string, double> SDM = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sdm_size());
  {
    ::std::unique_ptr<AttributeValue_SDMEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->sdm().begin();
        it != this->sdm().end(); ++it) {
      entry.reset(sdm_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string S = 2;
  if (this->s().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->s());
  }

  // double N = 3;
  if (this->n() != 0) {
    total_size += 1 + 8;
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttributeValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AttributeValue* source =
      ::google::protobuf::DynamicCastToGenerated<AttributeValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
    MergeFrom(*source);
  }
}

void AttributeValue::MergeFrom(const AttributeValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sl_.MergeFrom(from.sl_);
  sdm_.MergeFrom(from.sdm_);
  if (from.s().size() > 0) {

    s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
  if (from.n() != 0) {
    set_n(from.n());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void AttributeValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeValue::CopyFrom(const AttributeValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeValue::IsInitialized() const {
  return true;
}

void AttributeValue::Swap(AttributeValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttributeValue::InternalSwap(AttributeValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sl_.InternalSwap(CastToBase(&other->sl_));
  sdm_.Swap(&other->sdm_);
  s_.Swap(&other->s_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(n_, other->n_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata AttributeValue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sdk_2eproto);
  return ::file_level_metadata_sdk_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pbuffer
}  // namespace auxproxy
}  // namespace whitewater
}  // namespace amazon
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::ProcessReady >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::ProcessEnding* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::ProcessEnding >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::ProcessEnding >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionActivate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::GameSessionTerminate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::UpdatePlayerSessionCreationPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::AcceptPlayerSession >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::RemovePlayerSession >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::ReportHealth >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::StopMatchmakingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificate* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificate >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::ActivateGameSession >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::TerminateProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::DescribePlayerSessionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::UpdateGameSession >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::GetInstanceCertificateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::BackfillMatchmakingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::Response* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::Response >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::GameSession >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::GameSession >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::Player_PlayerAttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::Player_LatencyInMsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::Player* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::Player >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue_SDMEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue* Arena::CreateMaybeMessage< ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >(Arena* arena) {
  return Arena::CreateInternal< ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
